#ifndef REP_INSTRUMENTCLUSTER_REPLICA_H
#define REP_INSTRUMENTCLUSTER_REPLICA_H

// This is an autogenerated file.
// Do not edit this file, any changes made will be lost the next time it is generated.

#include <QtCore/qobject.h>
#include <QtCore/qdatastream.h>
#include <QtCore/qvariant.h>
#include <QtCore/qmetatype.h>

#include <QtRemoteObjects/qremoteobjectnode.h>
#include <QtRemoteObjects/qremoteobjectpendingcall.h>
#include <QtRemoteObjects/qremoteobjectreplica.h>

#include "instrumentclustermodule.h"

#include "warning.h"

class InstrumentClusterReplica : public QRemoteObjectReplica
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "InstrumentCluster")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "8d8d757af0e2646b02ce349cce7c8d5a9351d577")
    Q_PROPERTY(int speed READ speed NOTIFY speedChanged)
    Q_PROPERTY(int rpm READ rpm NOTIFY rpmChanged)
    Q_PROPERTY(qreal fuel READ fuel NOTIFY fuelChanged)
    Q_PROPERTY(qreal temperature READ temperature NOTIFY temperatureChanged)
    Q_PROPERTY(InstrumentClusterModule::SystemType systemType READ systemType NOTIFY systemTypeChanged)
    Q_PROPERTY(Warning currentWarning READ currentWarning NOTIFY currentWarningChanged)

public:
    InstrumentClusterReplica() : QRemoteObjectReplica() { initialize(); }
    static void registerMetatypes()
    {
        static bool initialized = false;
        if (initialized)
            return;
        initialized = true;
        qRegisterMetaType<Warning>();
        qRegisterMetaTypeStreamOperators<Warning>();
        qRegisterMetaType<InstrumentClusterModule::SystemType>();
        qRegisterMetaTypeStreamOperators<InstrumentClusterModule::SystemType>();

    }

private:
    InstrumentClusterReplica(QRemoteObjectNode *node, const QString &name = QString())
        : QRemoteObjectReplica(ConstructWithNode)
    {
        initializeNode(node, name);
    }

    void initialize() override
    {
        InstrumentClusterReplica::registerMetatypes();
        QVariantList properties;
        properties.reserve(6);
        properties << QVariant::fromValue(int());
        properties << QVariant::fromValue(int());
        properties << QVariant::fromValue(qreal());
        properties << QVariant::fromValue(qreal());
        properties << QVariant::fromValue(InstrumentClusterModule::SystemType());
        properties << QVariant::fromValue(Warning());
        setProperties(properties);
    }

public:
    virtual ~InstrumentClusterReplica() {}

    int speed() const
    {
        const QVariant variant = propAsVariant(0);
        if (!variant.canConvert<int>()) {
            qWarning() << "QtRO cannot convert the property speed to type int";
        }
        return variant.value<int >();
    }

    int rpm() const
    {
        const QVariant variant = propAsVariant(1);
        if (!variant.canConvert<int>()) {
            qWarning() << "QtRO cannot convert the property rpm to type int";
        }
        return variant.value<int >();
    }

    qreal fuel() const
    {
        const QVariant variant = propAsVariant(2);
        if (!variant.canConvert<qreal>()) {
            qWarning() << "QtRO cannot convert the property fuel to type qreal";
        }
        return variant.value<qreal >();
    }

    qreal temperature() const
    {
        const QVariant variant = propAsVariant(3);
        if (!variant.canConvert<qreal>()) {
            qWarning() << "QtRO cannot convert the property temperature to type qreal";
        }
        return variant.value<qreal >();
    }

    InstrumentClusterModule::SystemType systemType() const
    {
        const QVariant variant = propAsVariant(4);
        if (!variant.canConvert<InstrumentClusterModule::SystemType>()) {
            qWarning() << "QtRO cannot convert the property systemType to type InstrumentClusterModule::SystemType";
        }
        return variant.value<InstrumentClusterModule::SystemType >();
    }

    Warning currentWarning() const
    {
        const QVariant variant = propAsVariant(5);
        if (!variant.canConvert<Warning>()) {
            qWarning() << "QtRO cannot convert the property currentWarning to type Warning";
        }
        return variant.value<Warning >();
    }


Q_SIGNALS:
    void speedChanged(int speed);
    void rpmChanged(int rpm);
    void fuelChanged(qreal fuel);
    void temperatureChanged(qreal temperature);
    void systemTypeChanged(InstrumentClusterModule::SystemType systemType);
    void currentWarningChanged(Warning currentWarning);
    void pendingResultAvailable(quint64 id, bool isSuccess, const QVariant & value);

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};

#if (QT_VERSION < QT_VERSION_CHECK(5, 5, 0))
#endif


QT_BEGIN_NAMESPACE
QT_END_NAMESPACE


#endif // REP_INSTRUMENTCLUSTER_REPLICA_H
